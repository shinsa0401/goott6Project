<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boritgogae.memberMapper">

	<!-- 로그인하기위해 id와 pwd로 회원정보를 검색 -->
	<select id="logIn" resultType="MemberVo">
		select * from members where
		memberId = #{memberId} and memberPwd =
		sha1(md5(#{memberPwd}))
	</select>

	<!-- 자동로그인을 체크한 회원의 로그인유지를 위한 세션 정보 업데이트 -->
	<update id="updateMemberSession">
		update members set sessionId = #{sessionId},
		sessionLimit = #{sessionLimit}
		where memberId = #{memberId}
	</update>

	<!-- 자동로그인 체크한 회원인지 검색 -->
	<select id="selectAutoLogIn" resultType="MemberVo">
		select * from members
		where sessionId = #{sessionId}
	</select>

	<!-- 로그인 시간 업데이트 -->
	<update id="updateLogInDate">
		update members set logInDate = now() where memberId =
		#{memberId}
	</update>

	<!-- 로그아웃 시간 업데이트 -->
	<update id="updateLogOutDate">
		update members set logOutDate = now() where memberId
		= #{memberId}
	</update>

	<!-- 등급혜택을 가져오는 메서드 -->
	<select id="showGradeBenefit" resultType="GradesVo">
		select * from grades
		order by gradeValue asc
	</select>

	<!-- 쿠폰혜택을 가져오는 메서드 -->
	<select id="showCouponBenefit" resultType="CouponVo">
		select * from coupon
		order by couponName asc
	</select>

	<!-- 유저가 보유한 포인트를 가져오는 메서드 -->
	<select id="pointNow" resultType="int">
		select memberPoint from members
		where memberId= #{memberId}
	</select>

	<!-- 유저의 포인트 내역을 가져오는 메서드 -->
	<select id="showPointHistory" resultType="PointHistoryVo">
		select * from
		pointHistory where memberId= #{memberId}
	</select>

	<!-- 유저의 쿠폰 보유 내역을 가져오는 메서드 -->
	<select id="showCouponHaveList" resultType="CouponUsedVo">
		select * from
		couponUsed where memberId = #{memberId} and useDate is null
	</select>

	<!-- 유저의 쿠폰 사용 내역을 가져오는 메서드 -->
	<select id="showCouponUsedList" resultType="CouponUsedVo">
		select * from
		couponUsed where memberId = #{memberId} and useDate is not null
	</select>

	<!-- 유저의 작성글을 가져오는 메서드 -->
	<select id="showUserBoardList" resultType="UserBoardVo">
		select writer,
		writtenDate, title, readCount, '문의' as board from askBoard
		where writer
		= #{memberId}
		union all select memberId, writtenDate, title, readCount,
		'공지' as board
		from noticeBoard where memberId = #{memberId}
		union all
		select memberId, createDate, title, readCount, '팁' as board from
		tipBoard where memberId = #{memberId}
		union all select writer,
		writtenDate, title, readCount, '질문' as board from
		questionBoard where
		writer = #{memberId}
		union all select writer, writtenDate, title,
		readCount, '장터' as board from
		marketBoard where writer = #{memberId}
		union all select writer, createDate, title, readCount, '자유' as board
		from
		freeboard where writer = #{memberId} order by writtenDate desc
	</select>

	<!-- 유저의 작성 댓글을 가져오는 메서드 -->
	<select id="showUserReplyList" resultType="UserReplyVo">
		select memberId,
		writtenTime, contents, '질문' as board from askReplyBoard
		where memberId
		= #{memberId}
		union all select memberId, writtenDate, content, '공지' as
		board from
		noticeReplyBoard where memberId = #{memberId}
		union all
		select memberId, createDate, content, '팁' as board from tipReply
		where
		memberId = #{memberId}
		union all select replyWriter, replyWrittenDate,
		replyContent, '질문' as board
		from questionReply where replyWriter =
		#{memberId}
		union all select replyer, replyWrittenDate, replyContent,
		'장터' as board
		from marketReply where replyer = #{memberId}
		union all
		select replyer, replyWittenDate, replyContent, '자유' as board from
		freeReply where replyer = #{memberId} order by writtenTime desc
	</select>

	<!-- 유저가 쓴 리뷰 리스트를 가져오는 메서드 -->
	<select id="showUserReviewList" resultType="ReviewVO">
		select * from review
		where writer = #{memberId}
	</select>


	<!-- 유저가 리뷰를 쓰지 않은 구매확정 리스트를 가져오는 메서드 -->
	<select id="userAbleReviewList" resultType="OrderDetailVo">
		select * from
		detailOrder where memberId = #{memberId} and reviewStatus = 'N' and
		purchaseConfirm = 'Y'
	</select>

	<!-- 상품코드에 맞는 상품명을 반환하는 메서드 -->
	<select id="convertProdNoToProdName" resultType="String">
		select prodName
		from product where prodNo = #{prodCode}
	</select>

	<!-- 회원정보를 가져오는 메서드 -->
	<select id="showUserInfo" resultType="MemberVo">
		select memberImg, memberId,
		memberName, birthDay, joinDate, nickName, memberEmail, phoneNumber,
		grade, purchaseAmount, memberPoint,
		isAdmin from members where memberId
		= #{memberId}
	</select>


	<!-- 회원 아이디에 맞는 비번인지 확인하는 메서드 -->
	<select id="checkPwd" resultType="int">
		select count(*) from members
		where memberId = #{memberId} and memberPwd = sha1(md5(#{pwd}))
	</select>

	<!-- 회원 정보 수정 메서드 -->
	<update id="changeInfo">
		update members set
		<if test="target == 'memberPwd'">
			memberPwd = sha1(md5(#{value}))
		</if>
		<if test="target == 'nickName'">
			nickName = #{value}
		</if>
		<if test="target == 'phoneNumber'">
			phoneNumber = #{value}
		</if>
		where memberId = #{memberId}
	</update>

	<!-- 회원의 주소지 정보들을 불러오는 메서드 -->
	<select id="showDeliveryInfo"
		resultType="com.boritgogae.domain.DeliveryInfoVo">
		select * from deliveryInfo where memberId = #{memberId}
	</select>

	<!-- 회원의 주소지를 삭제하는 메서드 -->
	<delete id="deleteAddr">
		delete from deliveryInfo where memberId =
		#{memberId}
		and deliveryInfo = #{deliveryInfo}
	</delete>

	<!-- 회원의 주소지를 추가하는 메서드 -->
	<insert id="addAddr">
		insert into deliveryInfo(memberId, address,
		detailAddress, recipient,
		recipientPhoneNumber, postCode)
		values(#{memberId}, #{address}, #{detailAddress},
		#{recipient},
		#{recipientPhoneNumber}, #{postCode})
	</insert>


	<!-- 회원의 주소지를 추가하는 메서드 -->
	<update id="addMemberImg">
		update members set memberImg = #{memberImg} where
		memberId = #{memberId}
	</update>


	<!-- 회원 이메일 변경 메서드 -->
	<update id="changeMemberEmail">
		update members set memberEmail = #{memberEmail} where
		memberId = #{memberId}
	</update>

	<!-- 회원정보의 탈퇴여부를 Y로 바꾼다. -->
	<update id="membershipWithdrawalUpdate">
		update members set delStatus = 'Y' where
		memberId =
		#{memberId}
	</update>

	<!-- 회원탈퇴 테이블에 컬럼을 추가하는 메서드 -->
	<insert id="membershipWithdrawalInsert">
		insert into deleteAccount(memberId, deleteCode,
		deleteWhyMemo)
		values(#{memberId}, #{code}, #{contents})
	</insert>

	<!-- 유저가 쓴 리뷰 리스트를 가져오는 메서드 -->
	<select id="getMemberOrders" resultType="Integer">
		select orderNo from
		orders where memberId = #{memberId} order by orderNo desc
	</select>


	<!-- 주문번호에 따른 주문테이블의 내용을 가져오는 메서드 -->
	<select id="getOrdersContents"
		resultType="com.boritgogae.domain.OrdersVo">
		select * from orders where orderNo = #{orderNo}
	</select>


	<!-- 주문번호에 따른 상세주문+배송을 가져오는 메서드 -->
	<select id="getTotalOrderListVo" resultType="TotalOrderListVo">
		select d.*,
		v.deliveryNo, v.recipient, v.phoneNumber, v.address,
		v.detailAddress,
		v.postCode, v.deliveryRequest, v.deliveryStatus,
		v.returnDeliveryNo,
		v.deliveryCmplDate, p.prodName, p.prodPrice,
		i.originalFile
		from
		detailOrder d inner JOIN delivery v inner join product p inner join
		prodImg i
		on d.orderDetailNo = v.orderDetailNo and d.prodNo = p.prodNo
		and
		d.prodNo = i.prodNo
		where d.orderNo = #{orderNo}
		order by d.orderNo
		desc;
	</select>

	<!-- 주문취소시 주문상세내역 업데이트. -->
	<update id="orderCancleDetailOrder">
		update detailOrder set

		<if test="status == 'cancle'">
			cancelStatus = 'Y'
		</if>
		<if test="status == 'return'">
			returnOrExchangeConfirm = 'Y'
		</if>

		where orderNo = #{orderCancleOrderNo};
	</update>

	<!-- 주문취소시 배송 업데이트. -->
	<update id="orderCancleDelivery">
		update delivery set deliveryStatus =
		<if test="status == 'cancle'">
			'취소'
		</if>
		<if test="status == 'return'">
			'반품완료'
		</if>

		where orderNo = #{orderCancleOrderNo}
	</update>

	<!-- 주문취소시 쿠폰 업데이트. -->
	<update id="orderCancleCoupon">
		update couponUsed set useDate = null, orderNo = null
		where orderNo = #{orderCancleOrderNo};
	</update>

	<!-- 주문취소시 사용했던 포인트 가져오기 -->
	<select id="orderCancleUsedPoint" resultType="int">
		select usedPoint
		from orders where orderNo = #{orderCancleOrderNo};
	</select>

	<!-- 주문취소시 사용했던 포인트 재적립 -->
	<insert id="orderCancleUsedPointReset">
		insert into pointHistory(memberId, pointNo,
		pointHistory, orderNo) values(#{memberId}, 5, #{usedPoint},
		#{orderNo})
	</insert>

	<!-- 주문취소시 적립되었던 포인트 가져오기 -->
	<select id="orderCancleSavedPoint" resultType="int">
		select accumPoint
		from orders where orderNo = #{orderCancleOrderNo}
	</select>

	<!-- 주문취소시 적립되었던 포인트 차감 -->
	<insert id="orderCancleSavedPointReset">
		insert into pointHistory(memberId, pointNo,
		pointHistory, orderNo) values(#{memberId}, 5, -(#{savedPoint}),
		#{orderNo});
	</insert>

	<!-- 주문취소시 재적립된 포인트 업데이트 -->
	<update id="orderCanclePointUpdate">
		update members set memberPoint = #{pointUpdate} where
		memberId = #{memberId};
	</update>



	<!-- 구매확정시 주문상세내역 업데이트. -->
	<update id="orderPurchaseConfirmDetailOrder">
		update detailOrder set purchaseConfirm = 'Y' where
		orderNo = #{orderNo}
	</update>

	<!-- 구매확정시 배송 업데이트. -->
	<update id="orderPurchaseConfirmDelivery">
		update delivery set deliveryStatus = '구매확정' where
		orderNo = #{orderNo} and deliveryStatus = '배송완료'
	</update>

	<!-- 특정 주문번호에 사용한 쿠폰 내역을 가져온다. -->
	<select id="getUsedCouponByOrderNo" resultType="CouponUsedVo">
		select * from
		couponUsed where orderNo = #{orderNo}
	</select>

	<!-- 교환반품 테이블 insert -->
	<insert id="insertExchangeTable">
		insert into exchange(orderDetailNo, exchangeType,
		reasonNo, reasonContent) values(#{orderDetailNo}, #{exchangeType} ,
		#{reasonNo}, #{reasonContent})
	</insert>


	<!-- 주문상세 - 반품/교환 update -->
	<update id="exchangeStatusUpdateDetailOrder">
		update detailOrder set returnOrExchange =
		#{exchangeType} where
		orderDetailNo = #{orderDetailNo}
	</update>


	<!-- 배송 - 배송상태(반품요청) update -->
	<update id="exchangeStatusUpdateDelivery">
		update delivery set deliveryStatus = #{exchangeType}
		where
		orderDetailNo = #{orderDetailNo}
	</update>

	<!-- 주문 중 교환요청과 반품요청 상태인 상세주문번호를 찾는다. -->
	<select id="findRtnOrExForOrder" resultType="Integer">
		select * from
		detailOrder where orderNo = #{orderNo} and returnOrExchange != 'N'
	</select>


	<!-- 배송테이블에서 현재 배송상태를 가져온다. -->
	<select id="deliveryStatusCheck" resultType="String">
		select
		deliveryStatus from delivery where orderDetailNo = #{detailOrderNo}
	</select>



	<!-- 주문상세 정보 가져오기 -->
	<select id="getDetailOrderInfo" resultType="DetailOrderVo">
		select * from
		detailOrder where orderDetailNo = #{detailOrderNo}
	</select>


	<!-- 주문상세테이블의 마지막 번호를 받아오기 -->
	<select id="getDetailOrdersLastNo" resultType="Integer">
		select
		max(orderDetailNo) from detailOrder
	</select>

	<!-- 주문상세테이블 컬럼을 새로 넣어준다 -->
	<insert id="insertDetailOrder">
		insert into detailOrder(orderDetailNo, orderNo,
		prodNo, qty,
		prodSubTotalPrice, initialOrderDetailNo, memberId)
		values(#{orderDetailNo}, #{orderNo}, #{prodNo}, #{qty},
		#{prodSubTotalPrice}, #{initialOrderDetailNo}, #{memberId})
	</insert>

	<!-- 배송지 정보를 가져온다 -->
	<select id="getDeliveryInfo" resultType="DeliveryVo">
		select * from delivery
		where orderDetailNo = #{detailOrderNo}
	</select>


	<!-- 배송테이블 컬럼을 새로 넣어준다. -->
	<insert id="insertDelivery">
		insert into delivery(orderDetailNo, orderNo,
		recipient, phoneNumber, deliveryCompany, address, detailAddress,
		postCode, deliveryRequest, deliveryStatus)
		values(#{orderDetailNo},
		#{orderNo}, #{recipient}, #{phoneNumber}, #{deliveryCompany},
		#{address}, #{detailAddress}, #{postCode}, #{deliveryRequest},
		#{deliveryStatus})
	</insert>

	<!-- 주문상세 returnOrExchangeConfirm 정보를 변경 -->
	<update id="changeReturnOrExchangeConfirm">
		update detailOrder set returnOrExchangeConfirm =
		#{status} where
		orderDetailNo = #{orderDetailNo}
	</update>

	<!-- 쿠폰 이름에 맞는 할인율을 가져오는 메서드 -->
	<select id="getCouponDiscount" resultType="float">
		select couponDiscount
		from coupon where couponName = #{couponName}
	</select>


	<!-- 주문테이블 업데이트 -->
	<update id="updateOrdersTable">
		update orders set prodTotalPrice = #{prodTotalPrice},
		totalPrice = #{totalPrice} where orderNo = #{orderNo}
	</update>

	<!-- 주문 중 배송완료 상태인 상세주문번호를 찾는다. -->
	<select id="getOrderCompletedList" resultType="Integer">
		select orderDetailNo from delivery where orderNo = #{orderNo} and deliveryStatus = '배송완료'
	</select>

</mapper>
